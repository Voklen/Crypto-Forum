use crate::{
	custom_types::{Message, MessageForWriting},
	*,
};

#[test]
fn read() {
	let expected = vec![
		Message {
			prev_hash: [
				0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				0, 0, 0, 0, 0, 0, 0, 0,
			],
			public_key: ed25519_dalek::PublicKey::from_bytes(&[
				40, 151, 31, 122, 201, 208, 88, 167, 131, 68, 167, 174, 137, 226, 120, 246, 76, 47,
				160, 112, 83, 73, 250, 195, 91, 192, 40, 220, 255, 12, 254, 77,
			])
			.unwrap(),
			message: "hello".to_string(),
			signed: true,
			hash: [
				23, 189, 24, 38, 108, 90, 212, 238, 197, 124, 125, 252, 172, 131, 189, 160, 150,
				146, 57, 248, 122, 37, 169, 26, 54, 148, 253, 214, 156, 86, 84, 48, 213, 126, 169,
				110, 112, 193, 139, 171, 86, 28, 176, 254, 96, 7, 144, 162, 111, 100, 223, 91, 123,
				169, 69, 168, 29, 52, 236, 123, 77, 16, 200, 149,
			],
		},
		Message {
			prev_hash: [
				23, 189, 24, 38, 108, 90, 212, 238, 197, 124, 125, 252, 172, 131, 189, 160, 150,
				146, 57, 248, 122, 37, 169, 26, 54, 148, 253, 214, 156, 86, 84, 48, 213, 126, 169,
				110, 112, 193, 139, 171, 86, 28, 176, 254, 96, 7, 144, 162, 111, 100, 223, 91, 123,
				169, 69, 168, 29, 52, 236, 123, 77, 16, 200, 149,
			],
			public_key: ed25519_dalek::PublicKey::from_bytes(&[
				40, 151, 31, 122, 201, 208, 88, 167, 131, 68, 167, 174, 137, 226, 120, 246, 76, 47,
				160, 112, 83, 73, 250, 195, 91, 192, 40, 220, 255, 12, 254, 77,
			])
			.unwrap(),
			message: "hi".to_string(),
			signed: false,
			hash: [
				44, 227, 198, 209, 35, 116, 193, 127, 137, 140, 215, 159, 84, 75, 95, 172, 217,
				111, 75, 178, 53, 101, 104, 228, 201, 18, 108, 2, 42, 154, 25, 80, 91, 160, 119,
				222, 173, 213, 48, 17, 250, 233, 245, 112, 24, 202, 156, 220, 167, 103, 142, 79,
				42, 149, 182, 18, 161, 141, 41, 53, 99, 119, 81, 2,
			],
		},
		Message {
			prev_hash: [
				44, 227, 198, 209, 35, 116, 193, 127, 137, 140, 215, 159, 84, 75, 95, 172, 217,
				111, 75, 178, 53, 101, 104, 228, 201, 18, 108, 2, 42, 154, 25, 80, 91, 160, 119,
				222, 173, 213, 48, 17, 250, 233, 245, 112, 24, 202, 156, 220, 167, 103, 142, 79,
				42, 149, 182, 18, 161, 141, 41, 53, 99, 119, 81, 2,
			],
			public_key: ed25519_dalek::PublicKey::from_bytes(&[
				40, 151, 31, 122, 201, 208, 88, 167, 131, 68, 167, 174, 137, 226, 120, 246, 76, 47,
				160, 112, 83, 73, 250, 195, 91, 192, 40, 220, 255, 12, 254, 77,
			])
			.unwrap(),
			message: "indeed".to_string(),
			signed: true,
			hash: [
				2, 251, 94, 134, 28, 55, 212, 188, 1, 215, 195, 39, 32, 245, 202, 80, 4, 7, 139,
				77, 101, 82, 216, 94, 128, 100, 242, 115, 120, 167, 235, 79, 33, 91, 8, 73, 110,
				28, 29, 129, 250, 147, 26, 106, 75, 45, 192, 67, 2, 250, 219, 224, 150, 148, 37,
				160, 206, 208, 171, 213, 197, 94, 67, 133,
			],
		},
	];
	let test_file = "reference/reference.json";
	let file_slice = std::fs::read(test_file).unwrap();
	let parser = read::file_type(&file_slice).unwrap();
	let actual = read_serde::get_messages(&file_slice, &parser).unwrap();
	assert_eq!(actual, expected);
}

#[test]
fn read_write() {
	let test_data = vec![
		MessageForWriting {
			prev_hash: [
				0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				0, 0, 0, 0, 0, 0, 0, 0,
			],
			public_key: ed25519_dalek::PublicKey::from_bytes(&[
				40, 151, 31, 122, 201, 208, 88, 167, 131, 68, 167, 174, 137, 226, 120, 246, 76, 47,
				160, 112, 83, 73, 250, 195, 91, 192, 40, 220, 255, 12, 254, 77,
			])
			.unwrap(),
			message: "hello".to_string(),
			signature: ed25519_dalek::Signature::from_bytes(&[
				223, 54, 208, 218, 182, 40, 43, 67, 126, 144, 234, 122, 188, 1, 244, 145, 178, 155,
				128, 132, 104, 202, 56, 75, 182, 52, 30, 189, 85, 187, 212, 26, 209, 88, 143, 230,
				22, 220, 153, 232, 13, 149, 168, 68, 222, 167, 36, 247, 218, 175, 31, 119, 94, 127,
				94, 24, 41, 55, 251, 106, 73, 36, 252, 6,
			])
			.unwrap(),
		},
		MessageForWriting {
			prev_hash: [
				23, 189, 24, 38, 108, 90, 212, 238, 197, 124, 125, 252, 172, 131, 189, 160, 150,
				146, 57, 248, 122, 37, 169, 26, 54, 148, 253, 214, 156, 86, 84, 48, 213, 126, 169,
				110, 112, 193, 139, 171, 86, 28, 176, 254, 96, 7, 144, 162, 111, 100, 223, 91, 123,
				169, 69, 168, 29, 52, 236, 123, 77, 16, 200, 149,
			],
			public_key: ed25519_dalek::PublicKey::from_bytes(&[
				40, 151, 31, 122, 201, 208, 88, 167, 131, 68, 167, 174, 137, 226, 120, 246, 76, 47,
				160, 112, 83, 73, 250, 195, 91, 192, 40, 220, 255, 12, 254, 77,
			])
			.unwrap(),
			message: "hi".to_string(),
			signature: ed25519_dalek::Signature::from_bytes(&[
				104, 155, 246, 24, 42, 222, 149, 101, 11, 135, 170, 97, 217, 184, 226, 151, 102,
				236, 9, 140, 217, 105, 255, 233, 11, 132, 226, 79, 139, 113, 11, 93, 243, 89, 6,
				33, 11, 230, 142, 226, 245, 178, 0, 170, 11, 136, 40, 206, 195, 176, 90, 130, 72,
				155, 216, 124, 43, 224, 142, 28, 143, 95, 81, 3,
			])
			.unwrap(),
		},
		MessageForWriting {
			prev_hash: [
				44, 227, 198, 209, 35, 116, 193, 127, 137, 140, 215, 159, 84, 75, 95, 172, 217,
				111, 75, 178, 53, 101, 104, 228, 201, 18, 108, 2, 42, 154, 25, 80, 91, 160, 119,
				222, 173, 213, 48, 17, 250, 233, 245, 112, 24, 202, 156, 220, 167, 103, 142, 79,
				42, 149, 182, 18, 161, 141, 41, 53, 99, 119, 81, 2,
			],
			public_key: ed25519_dalek::PublicKey::from_bytes(&[
				40, 151, 31, 122, 201, 208, 88, 167, 131, 68, 167, 174, 137, 226, 120, 246, 76, 47,
				160, 112, 83, 73, 250, 195, 91, 192, 40, 220, 255, 12, 254, 77,
			])
			.unwrap(),
			message: "indeed".to_string(),
			signature: ed25519_dalek::Signature::from_bytes(&[
				100, 212, 142, 43, 60, 180, 59, 56, 98, 17, 41, 17, 50, 177, 244, 39, 194, 143,
				255, 15, 188, 42, 152, 248, 157, 237, 255, 64, 36, 132, 15, 204, 7, 245, 0, 192,
				44, 54, 49, 190, 210, 207, 0, 28, 139, 12, 151, 25, 142, 94, 1, 249, 45, 218, 169,
				147, 133, 218, 140, 9, 247, 202, 92, 0,
			])
			.unwrap(),
		},
	];
	let expected = vec![
		Message {
			prev_hash: [
				0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				0, 0, 0, 0, 0, 0, 0, 0,
			],
			public_key: ed25519_dalek::PublicKey::from_bytes(&[
				40, 151, 31, 122, 201, 208, 88, 167, 131, 68, 167, 174, 137, 226, 120, 246, 76, 47,
				160, 112, 83, 73, 250, 195, 91, 192, 40, 220, 255, 12, 254, 77,
			])
			.unwrap(),
			message: "hello".to_string(),
			signed: true,
			hash: [
				23, 189, 24, 38, 108, 90, 212, 238, 197, 124, 125, 252, 172, 131, 189, 160, 150,
				146, 57, 248, 122, 37, 169, 26, 54, 148, 253, 214, 156, 86, 84, 48, 213, 126, 169,
				110, 112, 193, 139, 171, 86, 28, 176, 254, 96, 7, 144, 162, 111, 100, 223, 91, 123,
				169, 69, 168, 29, 52, 236, 123, 77, 16, 200, 149,
			],
		},
		Message {
			prev_hash: [
				23, 189, 24, 38, 108, 90, 212, 238, 197, 124, 125, 252, 172, 131, 189, 160, 150,
				146, 57, 248, 122, 37, 169, 26, 54, 148, 253, 214, 156, 86, 84, 48, 213, 126, 169,
				110, 112, 193, 139, 171, 86, 28, 176, 254, 96, 7, 144, 162, 111, 100, 223, 91, 123,
				169, 69, 168, 29, 52, 236, 123, 77, 16, 200, 149,
			],
			public_key: ed25519_dalek::PublicKey::from_bytes(&[
				40, 151, 31, 122, 201, 208, 88, 167, 131, 68, 167, 174, 137, 226, 120, 246, 76, 47,
				160, 112, 83, 73, 250, 195, 91, 192, 40, 220, 255, 12, 254, 77,
			])
			.unwrap(),
			message: "hi".to_string(),
			signed: false,
			hash: [
				44, 227, 198, 209, 35, 116, 193, 127, 137, 140, 215, 159, 84, 75, 95, 172, 217,
				111, 75, 178, 53, 101, 104, 228, 201, 18, 108, 2, 42, 154, 25, 80, 91, 160, 119,
				222, 173, 213, 48, 17, 250, 233, 245, 112, 24, 202, 156, 220, 167, 103, 142, 79,
				42, 149, 182, 18, 161, 141, 41, 53, 99, 119, 81, 2,
			],
		},
		Message {
			prev_hash: [
				44, 227, 198, 209, 35, 116, 193, 127, 137, 140, 215, 159, 84, 75, 95, 172, 217,
				111, 75, 178, 53, 101, 104, 228, 201, 18, 108, 2, 42, 154, 25, 80, 91, 160, 119,
				222, 173, 213, 48, 17, 250, 233, 245, 112, 24, 202, 156, 220, 167, 103, 142, 79,
				42, 149, 182, 18, 161, 141, 41, 53, 99, 119, 81, 2,
			],
			public_key: ed25519_dalek::PublicKey::from_bytes(&[
				40, 151, 31, 122, 201, 208, 88, 167, 131, 68, 167, 174, 137, 226, 120, 246, 76, 47,
				160, 112, 83, 73, 250, 195, 91, 192, 40, 220, 255, 12, 254, 77,
			])
			.unwrap(),
			message: "indeed".to_string(),
			signed: true,
			hash: [
				2, 251, 94, 134, 28, 55, 212, 188, 1, 215, 195, 39, 32, 245, 202, 80, 4, 7, 139,
				77, 101, 82, 216, 94, 128, 100, 242, 115, 120, 167, 235, 79, 33, 91, 8, 73, 110,
				28, 29, 129, 250, 147, 26, 106, 75, 45, 192, 67, 2, 250, 219, 224, 150, 148, 37,
				160, 206, 208, 171, 213, 197, 94, 67, 133,
			],
		},
	];

	let test_file = "test_data/reference.json";
	let parser = &custom_types::SerdeParser::Json;
	write_serde::write_messages(test_file, parser, test_data).unwrap();
	let file_slice = std::fs::read(test_file).unwrap();
	let parser = read::file_type(&file_slice).unwrap();
	let actual = read_serde::get_messages(&file_slice, &parser).unwrap();

	assert_eq!(actual, expected);

	std::fs::remove_file(test_file).unwrap();
}
